/*
괄호가 개수는 맞지만 짝이 맞지 않은 형태로 작성되었다.
모든 괄호를 뽑아서 올바른 순서대로 배치된 괄호 문자열을 알려주는 프로그램을 개발하려고 한다.
균형잡힌 괄호 문자열 : '('의 개수와 ')'의 개수가 같다
올바른 괄호 문자열 : 위의 경우에 '('와 ')'의 짝도 모두 맞다.

<변환 과정>
1. 입력이 빈 문자열인 경우, 빈 문자열을 반환합니다.
2. 문자열 w를 두 "균형잡힌 괄호 문자열" u, v로 분리합니다.
   단, u는 "균형잡힌 괄호 문자열"로 더 이상 분리할 수 없어야 하며,
   v는 빈 문자열이 될 수 있습니다.
3. 문자열 u가 "올바른 괄호 문자열"이라면 문자열 v에 대해 1단계부터 다시 수행합니다.
 3-1. 수행한 결과 문자열을 u에 이어 붙인 후 반환합니다.
4. 문자열 u가 "올바른 괄호 문자열"이 아니라면 아래 과정을 수행합니다.
 4-1. 빈 문자열에 첫 번째 문자로 "("를 붙입니다.
 4-2. 문자열 v에 대해 1단계부터 재귀적으로 수행한 결과 문자열을 이어 붙입니다.
 4-3. ")"를 다시 붙입니다.
 4-4. u의 첫 번째와 마지막 문자를 제거하고, 나머지 문자열의 괄호 방향을 뒤집어서 뒤에 붙입니다.
 4-5. 생성된 문자열을 반환합니다.

 <제한 사항>
 1. p는 "("와 ")"로만 이루어진 문자열이며 길이는 2 이상 1,000 이하인 짝수입니다.
 2. 문자열 p를 이루는 "("와 ")"의 개수는 항상 같습니다.
 3. 만약 p가 이미 "올바른 괄호 문자열"이라면 그대로 return하면 됩니다.

 p "()))((()"
 return => "()(())()"
*/


function solution(p) {
   var answer = '';
   var left=0;
   var right=0;
   let correct=false;
   
   if(!p) return ""
   for(let i=0; i<p.length; i++){
       if(p[i]=="(") left++;
       if(p[i]==")") right++;
       
       if(left<right) correct=true;
       if(left==right){ //분리할 시점
           if(correct){ //올바른 괄호 X
               answer+="("
               answer+=solution(p.slice(i+1))
               answer+=")"
               
               for(let j=1; j<i; j++){
                   if(p[j]=="(") answer+=")"
                   if(p[j]==")") answer+="("
               }
               return answer;
           }
           else{
               answer+=p.slice(0, i+1)
               answer+=solution(p.slice(i+1))
               return answer;
           }
       }
   }
   
   return answer;
}
